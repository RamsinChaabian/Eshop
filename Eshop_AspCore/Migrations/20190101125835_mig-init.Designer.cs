// <auto-generated />
using Eshop_AspCore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Eshop_AspCore.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190101125835_mig-init")]
    partial class miginit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Eshop_AspCore.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<string>("City")
                        .IsRequired();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Mobile")
                        .IsRequired();

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("PostalCode")
                        .IsRequired();

                    b.Property<string>("Province")
                        .IsRequired();

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Eshop_AspCore.Data.Models.Category", b =>
                {
                    b.Property<int>("CatId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CatTitle")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("CatId");

                    b.ToTable("Tbl_Category");
                });

            modelBuilder.Entity("Eshop_AspCore.Data.Models.Comments", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("ConfirmComment");

                    b.Property<DateTime>("DateComment");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FulllName")
                        .IsRequired();

                    b.Property<string>("IP");

                    b.Property<int>("ProductId_FK");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<string>("UserId_FK");

                    b.HasKey("CommentId");

                    b.HasIndex("ProductId_FK");

                    b.HasIndex("UserId_FK");

                    b.ToTable("Tbl_Comments");
                });

            modelBuilder.Entity("Eshop_AspCore.Data.Models.Files", b =>
                {
                    b.Property<int>("FileId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alt");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("ServerId_FK");

                    b.Property<string>("Title")
                        .HasMaxLength(100);

                    b.HasKey("FileId");

                    b.HasIndex("ServerId_FK");

                    b.ToTable("Tbl_Files");
                });

            modelBuilder.Entity("Eshop_AspCore.Data.Models.FirstSubCategory", b =>
                {
                    b.Property<int>("FirstSubCatId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CatId_FK");

                    b.Property<string>("FirstSubCatTitle")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Picture");

                    b.HasKey("FirstSubCatId");

                    b.ToTable("Tbl_FirstSubCategory");
                });

            modelBuilder.Entity("Eshop_AspCore.Data.Models.Gallery", b =>
                {
                    b.Property<int>("PictureId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("DefaultPicProduct");

                    b.Property<string>("PictureName")
                        .IsRequired();

                    b.Property<int>("ProductId_FK");

                    b.Property<string>("TitlePicture")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("PictureId");

                    b.HasIndex("ProductId_FK");

                    b.ToTable("Tbl_Gallery");
                });

            modelBuilder.Entity("Eshop_AspCore.Data.Models.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Authority");

                    b.Property<DateTime>("DateOrder");

                    b.Property<string>("DescriptionPay");

                    b.Property<long>("RefID");

                    b.Property<bool>("StatusPay");

                    b.Property<decimal>("SumPrice");

                    b.Property<string>("TransactionId");

                    b.Property<string>("UserId_FK");

                    b.HasKey("InvoiceId");

                    b.HasIndex("UserId_FK");

                    b.ToTable("Tbl_Invoice");
                });

            modelBuilder.Entity("Eshop_AspCore.Data.Models.LastSubCategory", b =>
                {
                    b.Property<int>("LastSubCatId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LastSubCatTitle")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SecondSubCatId_FK");

                    b.HasKey("LastSubCatId");

                    b.ToTable("Tbl_LastSubCategory");
                });

            modelBuilder.Entity("Eshop_AspCore.Data.Models.Menu", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsActive");

                    b.Property<string>("Link");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("Tbl_Menu");
                });

            modelBuilder.Entity("Eshop_AspCore.Data.Models.Products", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CategoryId_FK");

                    b.Property<int>("CountProduct");

                    b.Property<DateTime>("DateProduct");

                    b.Property<string>("DefaultPic");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<int>("FirstSubCat_FK");

                    b.Property<bool>("IsShowProduct");

                    b.Property<int>("LastSubCat_FK");

                    b.Property<int>("OffProduct");

                    b.Property<decimal>("Price");

                    b.Property<string>("ProductCode")
                        .IsRequired();

                    b.Property<string>("ProductNameEN")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ProductNameFA")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("SecondSubCat_FK");

                    b.Property<int>("SeeProduct");

                    b.Property<string>("UserId_FK");

                    b.Property<int>("Weight");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId_FK");

                    b.HasIndex("FirstSubCat_FK");

                    b.HasIndex("LastSubCat_FK");

                    b.HasIndex("ProductNameFA");

                    b.HasIndex("SecondSubCat_FK");

                    b.HasIndex("UserId_FK");

                    b.ToTable("Tbl_Products");
                });

            modelBuilder.Entity("Eshop_AspCore.Data.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("RoleName")
                        .IsRequired();

                    b.Property<string>("RoleTitle")
                        .IsRequired();

                    b.HasKey("RoleId");

                    b.ToTable("Tbl_Role");
                });

            modelBuilder.Entity("Eshop_AspCore.Data.Models.SecondSubCategory", b =>
                {
                    b.Property<int>("SecondSubCatId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FirstSubCatId_FK");

                    b.Property<string>("SecondSubCatTitle")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("SecondSubCatId");

                    b.ToTable("Tbl_SecondSubCategory");
                });

            modelBuilder.Entity("Eshop_AspCore.Data.Models.Server", b =>
                {
                    b.Property<int>("ServerId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FtpPassword")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("FtpUsername")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("HttpDomain")
                        .IsRequired();

                    b.Property<string>("IP")
                        .IsRequired();

                    b.Property<string>("Path")
                        .IsRequired();

                    b.Property<string>("ServerTitle")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasKey("ServerId");

                    b.ToTable("Tbl_Server");
                });

            modelBuilder.Entity("Eshop_AspCore.Data.Models.SettingSite", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Email");

                    b.Property<string>("EmailPwd");

                    b.Property<int>("PageNumber");

                    b.Property<string>("SmsApiService");

                    b.Property<string>("SmsNumber");

                    b.Property<string>("SmsSecretKey");

                    b.Property<string>("Smtp");

                    b.Property<double>("Tax");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("Tbl_SettingSite");
                });

            modelBuilder.Entity("Eshop_AspCore.Data.Models.ShoppingCart", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateShop");

                    b.Property<int?>("InvoiceId");

                    b.Property<int>("ProductCount");

                    b.Property<int>("ProductId_FK");

                    b.Property<bool>("Status");

                    b.Property<string>("UserId_FK");

                    b.HasKey("ID");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ProductId_FK");

                    b.HasIndex("UserId_FK");

                    b.ToTable("Tbl_ShoppingCart");
                });

            modelBuilder.Entity("Eshop_AspCore.Data.Models.Slider", b =>
                {
                    b.Property<int>("SliderId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<int>("FileId_FK");

                    b.Property<string>("Link")
                        .IsRequired();

                    b.Property<bool>("ServerUpload");

                    b.Property<string>("SliderTitle")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Sort");

                    b.HasKey("SliderId");

                    b.HasIndex("FileId_FK");

                    b.ToTable("Tbl_Slider");
                });

            modelBuilder.Entity("Eshop_AspCore.Data.Models.UserAccess", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AddPost");

                    b.Property<bool>("DeletePost");

                    b.Property<bool>("EditPost");

                    b.Property<int>("RoleId_FK");

                    b.Property<string>("UserId_FK");

                    b.HasKey("ID");

                    b.HasIndex("RoleId_FK");

                    b.HasIndex("UserId_FK");

                    b.ToTable("Tbl_UserAccess");
                });

            modelBuilder.Entity("Eshop_AspCore.Data.Models.Weight", b =>
                {
                    b.Property<int>("Weight_Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("Weight_Max");

                    b.Property<int?>("Weight_Min");

                    b.Property<int?>("Weight_Price");

                    b.HasKey("Weight_Id");

                    b.ToTable("Tbl_Weight");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Eshop_AspCore.Data.Models.Comments", b =>
                {
                    b.HasOne("Eshop_AspCore.Data.Models.Products", "Tbl_Products")
                        .WithMany("Tbl_Comments")
                        .HasForeignKey("ProductId_FK")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Eshop_AspCore.Data.Models.ApplicationUser", "Tbl_User")
                        .WithMany()
                        .HasForeignKey("UserId_FK");
                });

            modelBuilder.Entity("Eshop_AspCore.Data.Models.Files", b =>
                {
                    b.HasOne("Eshop_AspCore.Data.Models.Server", "Tbl_Server")
                        .WithMany("Tbl_Files")
                        .HasForeignKey("ServerId_FK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Eshop_AspCore.Data.Models.Gallery", b =>
                {
                    b.HasOne("Eshop_AspCore.Data.Models.Products", "Tbl_Products")
                        .WithMany("Tbl_Gallery")
                        .HasForeignKey("ProductId_FK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Eshop_AspCore.Data.Models.Invoice", b =>
                {
                    b.HasOne("Eshop_AspCore.Data.Models.ApplicationUser", "Tbl_User")
                        .WithMany()
                        .HasForeignKey("UserId_FK");
                });

            modelBuilder.Entity("Eshop_AspCore.Data.Models.Products", b =>
                {
                    b.HasOne("Eshop_AspCore.Data.Models.Category", "Tbl_Category")
                        .WithMany("Tbl_Products")
                        .HasForeignKey("CategoryId_FK")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Eshop_AspCore.Data.Models.FirstSubCategory", "Tbl_FirstSubCategory")
                        .WithMany("Tbl_Products")
                        .HasForeignKey("FirstSubCat_FK")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Eshop_AspCore.Data.Models.LastSubCategory", "Tbl_LastSubCategory")
                        .WithMany("Tbl_Products")
                        .HasForeignKey("LastSubCat_FK")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Eshop_AspCore.Data.Models.SecondSubCategory", "Tbl_SecondSubCategory")
                        .WithMany("Tbl_Products")
                        .HasForeignKey("SecondSubCat_FK")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Eshop_AspCore.Data.Models.ApplicationUser", "Tbl_User")
                        .WithMany()
                        .HasForeignKey("UserId_FK");
                });

            modelBuilder.Entity("Eshop_AspCore.Data.Models.ShoppingCart", b =>
                {
                    b.HasOne("Eshop_AspCore.Data.Models.Invoice")
                        .WithMany("Tbl_ShoppingCart")
                        .HasForeignKey("InvoiceId");

                    b.HasOne("Eshop_AspCore.Data.Models.Products", "Tbl_Products")
                        .WithMany("Tbl_ShoppingCart")
                        .HasForeignKey("ProductId_FK")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Eshop_AspCore.Data.Models.ApplicationUser", "Tbl_User")
                        .WithMany()
                        .HasForeignKey("UserId_FK");
                });

            modelBuilder.Entity("Eshop_AspCore.Data.Models.Slider", b =>
                {
                    b.HasOne("Eshop_AspCore.Data.Models.Files", "Tbl_Files")
                        .WithMany("Tbl_Slider")
                        .HasForeignKey("FileId_FK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Eshop_AspCore.Data.Models.UserAccess", b =>
                {
                    b.HasOne("Eshop_AspCore.Data.Models.Role", "Tbl_Role")
                        .WithMany("Tbl_UserAccess")
                        .HasForeignKey("RoleId_FK")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Eshop_AspCore.Data.Models.ApplicationUser", "Tbl_User")
                        .WithMany()
                        .HasForeignKey("UserId_FK");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Eshop_AspCore.Data.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Eshop_AspCore.Data.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Eshop_AspCore.Data.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Eshop_AspCore.Data.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
